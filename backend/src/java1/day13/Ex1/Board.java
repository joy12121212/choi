package java1.day13.Ex1;


// 클래스 : 설계도 목적
// 설계도 : 1. 데이터의 모델링 2. 기능패턴 구분

public class Board {
	
	//-------------객체-------------//
	/*
	 클래스 / 설계도 -------- new ------> 인스턴스/객체
	[개발자 작성]			인스턴스화
	*/	
	
	//--------클래스 구성멤버----------//

	
	// 1.필드	: 객체의 데이터 저정하는 곳
		/*
		  
		 - 필드 종류
			- 인스턴스필드		: 객체 생성시 객체 안에 저장되어 있는 필드
			- 정적필드		: static 프로그램 실행시 우선할당 객체 없이 저장되어있는 필드
		
		- 필드 타입
			-기본 타입	: boolean char byte short int long float double 
			-참조 타입	: 클래스[객체] , 인터페이스 , 배열 , 열거타입 등등
		
		
		- 필드 접근 권한
			- 접근제한자		: 외부에서 해당 필드를 접근할 수 있는 제한/권한
				public		: 프로젝트 내 모든곳 // 전체
				private		: 현재 클래스 에서만 // 클래스만
				default		: [생략] 동일한 패키지 내에서 사용 // 패키지 안에서
				protected	:  
			
		- 기타 키워드
			- final			: 수정 불가 필드
			- static final	: 프로그램 전체에서 상수 만들기
			
			
		- 싱글톤	: 프로그램내 1개만 존재하는 객체
			1. 객체 생성 private static 사용하는 객체 선언
			2. public static getInstance() 싱글톤 객체 반환해주는 함수
			3. private 생성자() 외부로부터 생성자 사용 금지
		
			
		*/
	
	
	// 2.생성자	: 객체 초기화[처음 만들때/처음 값 대입]시 사용
	/*
		- 생성자를 사용할때 - 객체 선언할때
			클래스명 객체변수명 = new 생성자명();
			
		- 생성자 선언
			접근제한자 클래스명 ( 타입 매개변수명 , 타입 매개변수명 ) {}
			
		- 생성자 역할
			- 객체 생성시 매개변수를 받아서 필드에 저장
			- 유효성검사 / 계산식이 필요한 값을 필드에 저장할때
		
		- 생성자 종류 [ 오버로딩 으로인해 다양하게 가능 ]
			- 오버로딩 : 식별자명이 같더라도 매개변수의 개수, 순서, 타입에 따라서 식별 하는 것
	
		- 접근제한 private , public , default
		
		- 기타 키워드
			- this		: 생략가능 / 현재 클래스의 구성멤버 식별할때 사용
			- this.필드명	: 외부로부터 들어온 매개변수명과 현재 클래스내 필드명이 같으면 식별위해 사용
			- this()	: 현재 클래스의 생성자 호출
			- this.메소드명()	: 현재 클래스의 메소드 호출
	*/
	// 3.메소드	: 객체의 행동/동작 수행할때 사용
	
	/*
		- 메소드 종류
			- 인스턴스 메소드	: 객체 생성시 사용 가능한 메소드
			- 정적 메소드		: (static) 객체 없이 사용 가능한 메소드

		
		- 메소드 선언
			접근제한자 리턴타입 메소드명 ( 타입 매개변수명 , 타입 매개변수명 ) {}
		
			- 접근 제한자
				- public , private , default , protected
			- 리턴 타입	: 메소드 종료시 호출했던 곳으로 반환해주는 값의 타입
			- 매개변수	: 메소드 호출시 메소드 안으로 들어오는 값(데이터)
			- { } 		: 메소드 실행 코드
			- return	: void 생략 가능 / 리턴 타입에 맞는 값을 반환
			
		- 메소드 사용목적
			- 객체간의 상호작용	: 서로 다른 객체간의 데이터 이동
			- 재활용	: 코드 줄이기 / 간소화
			- 매개변수 에 따른 서로 다른 실행/결과 반환 가능 // 식을 만들어놓고 값을 다르게 넣는다
	
		- 외부객체에서 메소드를 호출하는 방법
			1. 객체를 이용한 메소드
				클래스명 객체변수명 = new 생성자명();
				객체변수명.메소드명();
			2. 객체 없이 정적 메소드를 호출
				클래스명.메소드명();
			3. 싱글톤/객체 내 인스턴스 메소드 호출
				클래스명.getInstance().메소드명();
	*/
	
	//--------클래스 구성멤버----------//
	
	/*
		- 필드 , 생성자 , 메소드를 이용한 프로그램 개발
		- mvc 디자인 패턴 : 기능역할에 따른 구분
			v : 입출력 담당
			c : 제어/로직=기능처리/유효성 검사 등등 담당
			m : 데이터 '모델' 과 '실제 데이터'
				- DTO : 데이터 이동 객체
					- 이동목적
						1. 여러개의 서로 다른 타입을 이동하면 불편함
							- int int string ~~~
						2. 하나의 객체로 만들어서 이동
							- dto
					- dto 가독성
						member		: 무슨객체?
						memberDto	: 이동하는 회원객체.. 식별 가능
						
				- DAO : 데이터 접근 객체 [ DB 접근만 ]
	
	
	
	
	
	
	
	
	
	
	
	
	*/
	
}


















