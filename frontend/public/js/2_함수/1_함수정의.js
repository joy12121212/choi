/*

	함수 [ 함 : 상자 / 수 : 숫자 ]
			- 상자 안에 들어있는 수 / 카드
			- 누군가 미리 상자에 넣어둔 수 /코드
			- 미리 정의[만들어진]된 수 / 코드
	
		1. function = 함수 / 행동 / 이벤트 내용물
		2. 하나의 특별한 목적의 작업을 수행하기 위한 독립적인 *코드의 집합*
		3. 사용 목적 
			1) 재활용성/재사용 : 한번 정의[만들기] 하면 반복적으로 사용 가능 / 중복된 코드 묶음처리, 코드양 감소
 
			2) 인수[매개변수] / 반환[리턴] : 인수에 따른 서로 다른 반환값 얻을 수 있음
				인수[매개변수] 란? : 함수 안으로 들어가는 수 / 코드(변수, 객체, 배열 ~~~)	[생략 가능]
				반환[리턴] 란? : 함수 밖으로 반환되는 수 / 코드							[생략 가능]
					ex)
						- 더하기 함수{x+y}		[1. 함수 정의]
						- 더하기 함수( 3, 5)		[2. 함수에 인수 전달]
						- 함수의 반환값 = 8		[3. 함수 실행 결과]
					
					자판기
						인수 : 돈 , 음료수 번호
						반환 : 선택된 음료수 [*돈 과 선택에 따른 서로 다른 음료수]
						

			3) 메모리 효율성 높일 수 있다
				함수 { } 안에서 시작 되고, 끝나면 메모리/코드는 전부 사라짐
				- 지역변수 란? : {} 안에서 선언된 메모리는 {} 밖에서 사용할 수 없음/{안에서 { } 안으로 들어갈수는 있음}
				- 전역변수 란? : {} 밖에서 선언된 메모리는 어디서든 사용 가능 하다
						* 메모리 : 변수/상수/배열/객체 등등
						* 메모리 증가 -> 속도 감수 -> 개발비(돈) 증가
						
		4. 함수 선언
		
			function 함수명
				1. function	: 함수 선언 키워드
				2. 함수명		: 서로 다른 함수간의 식별용 [ *js 내 동일한 이름 불가 / 키워드 (let , const , for ... 자료형) 사용 불가]
				3. ( )		: 인수 [ 함수 안으로 들어가는 코드/변수/배열/객체 등]
						 	  , 로 구분
				4. { }		: '{'  <-함수 시작   '}'  <- 함수 끝
				5. return	: 함수 종료 / 리턴 / 누구에게 리턴하는가 ? -> 함수를 호출 했던 곳으로 반환한다
						return 3; 		함수를 호출했던 곳으로 3 반환
						return;			리턴 없이 종료 
				
				
				
		5. 함수 호출/사용				
			1. js : 함수명(인수, 인수, 인수)




*/

// 1. 함수의 정의
function 함수1(){}				// 1. 인수x 반환x
function 함수2( x ){}			// 2. 인수(x = 임의의 변수 / 매개변수명) 반환x
function 함수3( x , y , z ){}	// 3. 인수여러개 (,로 구분) 반환x
function 함수4( x , y , z ){return 3;}	// 4. 인수 있음 / 반환값 있다.
function 함수5(){return 5;}	// 5. 인수 없음 / 반환값 있다.
function 함수6(){return;}		// 6. 인수 없음 / 반환값 없. 단순 종료 역할
	// * 함수가 종료되는 조건 : 1. '}' <-함수 종료  2. return 키워드를 만나면 종료[아래에 코드가 더 있어서 리턴 만나면 그냥 끝]
	
// 2. 함수 호출
console.log('안녕!!')		// 1. 미리 정의된(js 만든사람이 미리 만들어놓은) log (매개변수 = 출력하고싶은 문자열) 함수
document.querySelector('')	// 2. 미리 정의된(js 만든사람이 미리 만들어놓은) querySelector
							// -> 누군가 미리 만든 코드 (api , 프레임 워크, 라이브러리)는 설계 모르기에 암기x 검색해 , 구글링
배열명.splice( 0 , 1 )		// 3. 미리 정의된(js 만든사람이 미리 만들어놓은) splice( 인수1 , 인수2 )


함수명1();					// 4. js에서 내가 만든 함수 호출
함수명2(3);					// 5. 함수 호출과 동시에 해당 함수에 3 전달
함수명3(3, 5, 20);			// 6. 함수 호출과 동시에 해당 함수에 3 5 20 데이터 3개 전달
let 함수결과1 = 함수명4(3, 5, 20);		// 7. 리턴값을 바로 출력시 콘솔 등 을 이용, 저장이 필요할시 변수를 만들어 저장한다
let 함수결과2 = 함수명5();		// 8. 인수 없고 반환값을 변수에 저장 한다
함수6()						// 9.  리턴 이 없으므로 별도 저장 안한다


// 3. 함수 호출2
// 1) html 이벤트 함수 호출
//	<input type = "button" onclick="함수명6()">
// 2) 함수 내에서 다른 함수 호출	
function 함수7(){console.log('함수 안에서 함수 호추')}
function 함수7(){함수7();}

// 4. 함수 연산
let 연산결과 = 함수4() + 10;	//함수4의 반환값이 3 이므로 [3 + 10 = 13] 출력
		//	1 순위 함수4() 호출
		//  2 순위 + 실행
		// 	3 순위 = 실행
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

















