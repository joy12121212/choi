/*

	스크립트 : 객체 지향 언어 [oop : object oriented programing]
			
			class = 사전적인 정의 
			객체(object) = 실제 존재하는 것, 토대로 메모리 할당된 것
			세상 모든 형태들을 코드화 시킨다 = 객체
			대량화 / 자동화 / 금전적 이득  => 객체 지향 프로그래밍에 적합 하다.
				=> 미리 만들어놓고(class) 컴퓨터에게 설계를 주입해서 설계 기반으로 형태 생성
			유지보수 유리
			ex) 
				자동차
				자동차설계도 = class
				a자동차 = 객체 , b자동차 = 객체 / 각 각 다르다
				
				붕어빵
					붕어빵틀 = class
					붕어빵1 = 객체 ,  붕어빵2 = 객체 / 각 각 다르다
					
				30평형 아파트
					아파트설계도 = class
					우리집 = 객체 , 옆집 = 객체 / 각 각 다르다
				
				냉장고 
					냉장고설계도 = class
					냉장고 = 객체
				-우리집(객체(냉장고(객체)))
				
			1. 정의 : 세상에 존재하는 모든 형태를 코드화
			2. 목적 : 
				1) 형태를 코드화 [자동화, 대량화]
				2) 객체 특징 
					1. 모듈 개발(분업화) / 유지보수 유리 / 설계관리 복잡
					2. 다형성 (다양한 형태) / 호환


		js 객체 = json
			1. 스크립트 메모리
				1) 변수 = 데이터
				2) 상수 = 데이터
				3) 배열 = [데이터1 , 데이터2 , 데이터3]
					- 배열 단점 : 서로 다른 정보유형들을 하나의 배열에 관리하면 힘들다
						ex) 사람1 / 사람2 / 사람3 3명의 회원(아이디, 비밀번호 이름, 주소 등)등록
							방법1 = 종류별로 배열 다 만들어야 됨 [ 데이터 유형(이름, 아이디 등)이 무엇인지 식별하기 위해서]
							방법2 = 배열 1개에 인덱스별로 관리
							방법3 = 객체 유형
								let 회원1 = { 아이디 : 'qwe' , 비밀번호 : 'qwe' , 이름 : '소오' , 주소 : '안산'}
								let 회원2 = { 아이디 : 'qwe1' , 비밀번호 : 'qwe1' , 이름 : '소오1' , 주소 : '안산'}
								let 회원3 = { 아이디 : 'qwe2' , 비밀번호 : 'qwe2' , 이름 : '소오2' , 주소 : '안산'}
				4) 객체 = { }
					- 사용목적 : 서로 다른 데이터유형(속성) 들을 한곳에 저장 / 묶음
					- 형태
						let 객체명 = { ★속성명★ : 데이터, 속성명 : 데이터, 속성명 : 데이터, }
					- 선언
						키워드 객체명 = {
										속성명 : 데이터 ,
										속성명 : 변수 ,
										속성명 : 상수 ,
										속성명 : 배열 ,
										속성명 : 함수
										}// 마지막 쉼표는 생략 해라 // 헷갈려
				5) 객체 호출
					1. 객체 전체 : 객체명
					2. 객체내 특정 속성 호출 : .접근연산자 [객체 내 속성 접근(호출)해서 데이터 호출]
				6) 객체 속성 값 변경
					객체명.속성명 = 새로운 값
				7) 객체내 속성 추가
					객체명.속성명 = 데이터
				8) 객체내 속성 삭제
					delete 객체명.속성	;	
				9) 여러개 객체 -> 관리 (배열 / 리스트 이용)		
					회원객체1 , 1번 게시물 객체, 회원객체2 , 2번 게시물 객체
					let 회원객체배열 = [ 회원객체1 , 회원객체2] // 같은 유형들을 배열에 담아라
					let 게시물객체배열 = [ 1번 게시물 객체 , 2번 게시물 객체] // 같은 유형들을 배열에 담아라

 */
//1. 객체 선언
let 객체1 = {아이디 : 'qwe', 비밀번호 : '123' , 이름 : '소오땡' } // 속성명 붙여서 데이터 구분 가능
											//여기에 함수를 넣을수도 있음
let 배열1 = ['qwe' , '123' , '소소땡']
 
//2. 객체 호출
console.log(객체1); // 콘솔 찍으면 객체1 에 있는거 다 나옴
console.log(객체1.아이디);  // 콘솔 찍으면 아이디 안에 있는 데이터 qwe만 출력
console.log(객체1.비밀번호);  // 콘솔 찍으면 비밀번호 안에 있는 데이터 123만 출력 // 객체를 먼저 찍어서 속성이 뭐가 있는지 확인해보면 좋다
		// console : 내장객체 -> console 객체에서 log() 함수 호출
		// document : 내장객체 -> document 객체에서 qeuerySeletor() 함수 호출
 
 //3. 객체의 속성내 데이터 변경

객체1.아이디='123456'  // 객체 내 비밀번호 속성을 호출해서 새로운 데이터 대입 가능

//4. 객체의 속성 추가
객체1.주소='안산' // 객체 내 주소 속성이 없으므로 호출이 아닌 '안산' 이라는 데이터가 '추가' 된다
console.log(객체1);

//5. 객체내 속성 삭제
delete 객체1.주소;
console.log(객체1);


//6. 
let 객체2 = {아이디 : 'aaa', 비밀번호 : '34asdf' , 이름 : '소오땡3' } 
let 객체3 = {아이디 : 'eee', 비밀번호 : 'daffa' , 이름 : '소오땡5' }

let 객체배열 = [객체1, 객체2, 객체3]  // 아이디, 비밀번호, 이름 3가지 속성을 가지고있는 객체니까 서로 묶어서 쉽게 관리 / 속성이 다른거는 묶지 마라
console.log(객체배열);


// json : 서로다른(웹/앱) 언어들 간의 데이터 구조 형태 // 한국인 과 일본인이 만나 영어로 대화 한다

